
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  nailSets      NailSet[]
  baseCoats     BaseCoat[]
  topCoats      TopCoat[]
  artNails      ArtNail[]
  colorNails    ColorNail[]
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

model BaseCoat {
  id String  @id @default(cuid())
  name String
  brandId String
  brand Brand @relation(fields: [brandId], references: [id])
  image String
  nails Nail[]
  userId String
  User User @relation(fields: [userId], references: [id])
}

model TopCoat {
  id String  @id @default(cuid())
  name String
  brandId String
  brand Brand @relation(fields: [brandId], references: [id])
  image String
  userId String
  nails Nail[]
  User User @relation(fields: [userId], references: [id])
}

model ArtNail {
  id String  @id @default(cuid())
  genre String
  name String
  brandId String
  brand Brand @relation(fields: [brandId], references: [id])
  image String
  userId String
  nails Nail[]
  User User @relation(fields: [userId], references: [id])
}

model ColorNail {
  id String  @id @default(cuid())
  genre String
  name String
  brandId String
  brand Brand @relation(fields: [brandId], references: [id])
  image String
  userId String
  nails Nail[]
  User User @relation(fields: [userId], references: [id])
}

model Nail{
  id String  @id @default(cuid())
  finger  Int
  baseId String
  base    BaseCoat @relation(fields: [baseId], references: [id])
  colorId String
  color   ColorNail @relation(fields: [colorId], references: [id])
  artId String
  art    ArtNail @relation(fields: [artId], references: [id])
  topId String
  top     TopCoat @relation(fields: [topId], references: [id])
  setId String
  nailSet NailSet @relation(fields: [setId], references: [id], onDelete: Cascade)
}

model  NailSet{
  id String  @id @default(cuid())
  title String
  image String
  base String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic Boolean @default(false)
  nails Nail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id String  @id @default(cuid())
  name String
  baseCoats BaseCoat[]
  topCoats TopCoat[]
  artNails ArtNail[]
  colorNails ColorNail[]
}